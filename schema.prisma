datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  owner
  tenant
  staff
}

enum RoomStatus {
  occupied
  available
  underMaintenance
  notAvailable
}

enum AgreementType {
  rent
  buy
}

enum IdentityType {
  aadhaar
  passport
  drivingLicense
  panCard
  voterId
  rationCard
  other
}

enum Gender {
  Male
  Female
  Other
}

model User {
  id          Int      @id @default(autoincrement())
  email       String?
  picture     String?
  role        Role?
  name        String?
  phoneNumber String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  Society               Society?
  Unit                  Unit[]
  Agreement             Agreement[]
  PersonalInformation   PersonalInformation?
  AdditionalInformation AdditionalInformation?
  MemberInformation     MemberInformation[]
}

model PersonalInformation {
  id                      Int           @id @default(autoincrement())
  dob                     DateTime
  gender                  Gender
  primaryIdentityType     IdentityType
  primaryIdentityNumber   String
  secondaryIdentityType   IdentityType?
  secondaryIdentityNumber String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdditionalInformation {
  id                     Int     @id @default(autoincrement())
  alternativePhoneNumber String?
  alternativeEmail       String?
  emergencyContactNumber String
  emergencyContactName   String
  occupation             String
  organizationName       String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MemberInformation {
  id       Int      @id @default(autoincrement())
  name     String
  relation String
  dob      DateTime

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Society {
  id          Int        @id @default(autoincrement())
  name        String
  address     String
  type        String
  createdById Int        @unique
  createdBy   User       @relation(fields: [createdById], references: [id])
  Buildings   Building[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Building {
  id        Int     @id @default(autoincrement())
  name      String
  floors    Int?
  societyId Int
  society   Society @relation(fields: [societyId], references: [id], onDelete: Cascade)
  Unit      Unit[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Unit {
  id              Int        @id @default(autoincrement())
  name            String
  type            String
  status          RoomStatus @default(available)
  floor           Int?
  buildingId      Int
  building        Building   @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  allocatedUserId Int?
  allocatedTo     User?      @relation(fields: [allocatedUserId], references: [id])

  updatedAt DateTime    @updatedAt
  createdAt DateTime    @default(now())
  Agreement Agreement[]

  @@unique([name, buildingId])
}

model Agreement {
  id            Int           @id @default(autoincrement())
  agreementType AgreementType
  startDate     DateTime
  endDate       DateTime?
  monthlyRent   Float?
  depositAmount Float?
  maintenance   Float?
  agreementFile String?
  terms         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  tenantId Int
  tenant   User @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  unitId Int
  unit   Unit @relation(fields: [unitId], references: [id])
}
